\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {chapter}{\numberline {7}Multi-paradigm programming in Prolog and Java}{136}{chapter.7}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{ch:mpp-in-java}{{7}{136}{Multi-paradigm programming in Prolog and Java}{chapter.7}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.1}Using Java from Prolog: \textit  {OOLibrary}}{136}{section.7.1}}
\newlabel{sec:java-library}{{7.1}{136}{Using Java from Prolog: \textit {OOLibrary}}{section.7.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.1}Type mapping}{137}{subsection.7.1.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.1}{\ignorespaces Prolog/Java type mapping.\relax }}{137}{table.caption.51}}
\newlabel{tab:prolog-java-type-mapping}{{7.1}{137}{Prolog/Java type mapping.\relax }{table.caption.51}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.2}Creating and accessing objects: an overview}{138}{subsection.7.1.2}}
\newlabel{ssec:creating-and-accessing-objects}{{7.1.2}{138}{Creating and accessing objects: an overview}{subsection.7.1.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.1}Basic object manipulation examples}{142}{subsubsection.7.1.2.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.2}{\ignorespaces The Java \texttt  {Counter} class and the Prolog program that exploits it via OOLibrary.\relax }}{143}{table.caption.52}}
\newlabel{tab:javalibrary-counter-example}{{7.2}{143}{The Java \texttt {Counter} class and the Prolog program that exploits it via OOLibrary.\relax }{table.caption.52}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.3}{\ignorespaces Using the \texttt  {as} infix operator to cast a method argument.\relax }}{144}{table.caption.53}}
\newlabel{tab:jexamples-as-infix-operator}{{7.3}{144}{Using the \texttt {as} infix operator to cast a method argument.\relax }{table.caption.53}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.4}{\ignorespaces Creating and using a Swing component from a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} program.\relax }}{145}{table.caption.54}}
\newlabel{tab:jexamples-swing}{{7.4}{145}{Creating and using a Swing component from a \tuprolog {} program.\relax }{table.caption.54}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.2}Cast example}{145}{subsubsection.7.1.2.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.3}Swing example}{145}{subsubsection.7.1.2.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.4}Registering object bindings}{145}{subsubsection.7.1.2.4}}
\newlabel{sssec:register(prolog)}{{7.1.2.4}{145}{Registering object bindings}{subsubsection.7.1.2.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.3}Lambda expressions}{146}{subsection.7.1.3}}
\newlabel{ssec:lambda-expressions}{{7.1.3}{146}{Lambda expressions}{subsection.7.1.3}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.5}{\ignorespaces \emph  {\texttt  {new\_lambda/3} vs. standard Java 8 code.}\relax }}{147}{table.caption.55}}
\newlabel{tab:lambda-prolog-java-comparison}{{7.5}{147}{\emph {\texttt {new\_lambda/3} vs. standard Java 8 code.}\relax }{table.caption.55}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.6}{\ignorespaces \emph  {Creating and using a Predicate function from \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 3.}\relax }}{148}{table.caption.56}}
\newlabel{tab:lambda-Pred-ex}{{7.6}{148}{}{lstlisting.7.-3}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.7}{\ignorespaces \emph  {Creating and using a BiFunction function from \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 3.}\relax }}{148}{table.caption.57}}
\newlabel{tab:lambda-Bifunct-ex}{{7.7}{148}{}{lstlisting.7.-4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.8}{\ignorespaces \emph  {Creating and using a Comparator from \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 3}\relax }}{149}{table.caption.58}}
\newlabel{tab:lambda-Comp-ex}{{7.8}{149}{}{lstlisting.7.-5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.4}Predicates}{150}{subsection.7.1.4}}
\newlabel{ssec:all-javalibrary-predicates}{{7.1.4}{150}{Predicates}{subsection.7.1.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.4.1}Object creation, method invocation and lambdas}{150}{subsubsection.7.1.4.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.9}{\ignorespaces Summary of \texttt  {OOLibrary} predicates (part 1).\relax }}{151}{table.caption.59}}
\newlabel{tab:summary-of-javalibrary-predicates1}{{7.9}{151}{Summary of \texttt {OOLibrary} predicates (part 1).\relax }{table.caption.59}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.10}{\ignorespaces Summary of \texttt  {OOLibrary} predicates (part 2).\relax }}{152}{table.caption.60}}
\newlabel{tab:summary-of-javalibrary-predicates2}{{7.10}{152}{Summary of \texttt {OOLibrary} predicates (part 2).\relax }{table.caption.60}{}}
\newlabel{tab:comparison-of-javalibrary-vs-oolibrary-predicates}{{\caption@xref {tab:comparison-of-javalibrary-vs-oolibrary-predicates}{ on input line 877}}{153}{Predicates}{table.caption.61}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.11}{\ignorespaces The new \texttt  {OOLibrary} vs. the older \texttt  {JavaLibrary}\relax }}{153}{table.caption.61}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.4.2}Dynamic class compilation}{155}{subsubsection.7.1.4.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.4.3}Array management}{155}{subsubsection.7.1.4.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.4.4}Class path handling predicates}{156}{subsubsection.7.1.4.4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.4.5}Helper predicates}{157}{subsubsection.7.1.4.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.5}Functors}{157}{subsection.7.1.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.6}Operators}{157}{subsection.7.1.6}}
\@writefile{lot}{\contentsline {table}{\numberline {7.12}{\ignorespaces OOLibrary operators.\relax }}{157}{table.caption.62}}
\newlabel{tab:javalibrary-operators}{{7.12}{157}{OOLibrary operators.\relax }{table.caption.62}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.7}Examples}{157}{subsection.7.1.7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.7.1}RMI Connection to a Remote Object}{157}{subsubsection.7.1.7.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.13}{\ignorespaces The RMI example in Java and in \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} via OOLibrary.\relax }}{158}{table.caption.63}}
\newlabel{tab:rmi-example}{{7.13}{158}{The RMI example in Java and in \tuprolog {} via OOLibrary.\relax }{table.caption.63}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.7.2}A Swing GUI}{158}{subsubsection.7.1.7.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.7.3}Database access via JDBC}{159}{subsubsection.7.1.7.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.7.4}Dynamic compilation}{159}{subsubsection.7.1.7.4}}
\@writefile{lot}{\contentsline {table}{\numberline {7.14}{\ignorespaces Calculation of the minimum path between two given cities: the required data are fetched from a database via JDBC as shown in Table \ref  {tab:jdbc-example-part2}.\relax }}{160}{table.caption.64}}
\newlabel{tab:jdbc-example-part1}{{7.14}{160}{Calculation of the minimum path between two given cities: the required data are fetched from a database via JDBC as shown in Table \ref {tab:jdbc-example-part2}.\relax }{table.caption.64}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.15}{\ignorespaces Accessing JDBC via \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}'s OOLibrary.\relax }}{161}{table.caption.65}}
\newlabel{tab:jdbc-example-part2}{{7.15}{161}{Accessing JDBC via \tuprolog {}'s OOLibrary.\relax }{table.caption.65}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.16}{\ignorespaces Dynamic compilation of a (Java) source code.\relax }}{161}{table.caption.66}}
\newlabel{tab:dynamic-compilation}{{7.16}{161}{Dynamic compilation of a (Java) source code.\relax }{table.caption.66}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.17}{\ignorespaces Another example of dynamic compilation, where the class source is retrieved via FTP: the user \texttt  {myName}, whose password is \texttt  {myPwd}, gets the content of the \texttt  {Counter.java} file from the server whose IP address is \texttt  {srvAddr}, dynamically compiles the class and creates a corresponding object. The FTP service is provided here by a shareware library, but any other similar library would work.\relax }}{162}{table.caption.67}}
\newlabel{tab:dynamic-compilation-via-FTP}{{7.17}{162}{Another example of dynamic compilation, where the class source is retrieved via FTP: the user \texttt {myName}, whose password is \texttt {myPwd}, gets the content of the \texttt {Counter.java} file from the server whose IP address is \texttt {srvAddr}, dynamically compiles the class and creates a corresponding object. The FTP service is provided here by a shareware library, but any other similar library would work.\relax }{table.caption.67}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.8}Handling Java Exceptions}{163}{subsection.7.1.8}}
\newlabel{ssec:java-exceptions-in-tuprolog}{{7.1.8}{163}{Handling Java Exceptions}{subsection.7.1.8}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.8.1}Java exception examples}{164}{subsubsection.7.1.8.1}}
\newlabel{ssec:java-exception-examples}{{7.1.8.1}{164}{Java exception examples}{subsubsection.7.1.8.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.1}{\ignorespaces Catching the Java exceptions of Example 1 in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI. \textit  {Top:} the solutions tab. \textit  {Bottom:} details of the exception in the exception tab (see the \texttt  {Cause} variable bound to \texttt  {0} and the \texttt  {Msg} variable bound to \texttt  {'Counter'}; the other details map onto the anonymous variable \texttt  {\_}). \relax }}{165}{figure.caption.68}}
\newlabel{fig:exceptions1}{{7.1}{165}{Catching the Java exceptions of Example 1 in the \tuprolog {} GUI. \textit {Top:} the solutions tab. \textit {Bottom:} details of the exception in the exception tab (see the \texttt {Cause} variable bound to \texttt {0} and the \texttt {Msg} variable bound to \texttt {'Counter'}; the other details map onto the anonymous variable \texttt {\_}). \relax }{figure.caption.68}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.2}{\ignorespaces A failed exception in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI: the \texttt  {No} answer in the status bar and the \textit  {halt} message in the Solutions tab.\relax }}{166}{figure.caption.69}}
\newlabel{fig:exceptions2}{{7.2}{166}{A failed exception in the \tuprolog {} GUI: the \texttt {No} answer in the status bar and the \textit {halt} message in the Solutions tab.\relax }{figure.caption.69}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.2}Using Prolog from Java: \textit  {the Java API}}{168}{section.7.2}}
\newlabel{sec:java-api}{{7.2}{168}{Using Prolog from Java: \textit {the Java API}}{section.7.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.1}A Taxonomy of Prolog types in Java}{168}{subsection.7.2.1}}
\newlabel{ssec:java-api-types}{{7.2.1}{168}{A Taxonomy of Prolog types in Java}{subsection.7.2.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.3}{\ignorespaces Prolog entities as a taxonomy of Java classes.\relax }}{168}{figure.caption.70}}
\newlabel{fig:term-taxonomy}{{7.3}{168}{Prolog entities as a taxonomy of Java classes.\relax }{figure.caption.70}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.1.1}Further notes about \texttt  {Term}s}{169}{subsubsection.7.2.1.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.18}{\ignorespaces Manipulating Prolog entities from Java.\relax }}{170}{table.caption.71}}
\newlabel{tab:creating-prolog-terms-in-java}{{7.18}{170}{Manipulating Prolog entities from Java.\relax }{table.caption.71}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.2}Prolog engines, theories and libraries}{171}{subsection.7.2.2}}
\newlabel{ssec:java-api-engine-solveinfo}{{7.2.2}{171}{Prolog engines, theories and libraries}{subsection.7.2.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.2.1}Further notes about \texttt  {Prolog} engines}{171}{subsubsection.7.2.2.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.19}{\ignorespaces Classes for interacting with \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} engines.\relax }}{172}{table.caption.72}}
\newlabel{tab:engine-interface}{{7.19}{172}{Classes for interacting with \tuprolog {} engines.\relax }{table.caption.72}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.3}Examples}{173}{subsection.7.2.3}}
\newlabel{ssec:java-api-examples}{{7.2.3}{173}{Examples}{subsection.7.2.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.1}Appending lists}{173}{subsubsection.7.2.3.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.20}{\ignorespaces The list appending example.\relax }}{174}{table.caption.73}}
\newlabel{tab:java-api-example1}{{7.20}{174}{The list appending example.\relax }{table.caption.73}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.21}{\ignorespaces Building a theory ``by hand'' from a clause list.\relax }}{175}{table.caption.74}}
\newlabel{tab:java-api-example-clauselist}{{7.21}{175}{Building a theory ``by hand'' from a clause list.\relax }{table.caption.74}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.2}Exploiting a theory from clause list}{176}{subsubsection.7.2.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.3}A console-based Prolog interpreter}{176}{subsubsection.7.2.3.3}}
\@writefile{lot}{\contentsline {table}{\numberline {7.22}{\ignorespaces A simple console-based Prolog interpreter.\relax }}{177}{table.caption.75}}
\newlabel{tab:console-sample}{{7.22}{177}{A simple console-based Prolog interpreter.\relax }{table.caption.75}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.4}{\ignorespaces A sample session with the Console-based Interpreter.\relax }}{178}{figure.caption.76}}
\newlabel{fig:console-interpreter}{{7.4}{178}{A sample session with the Console-based Interpreter.\relax }{figure.caption.76}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.4}Support to relative paths in consulting Prolog sub-files}{178}{subsection.7.2.4}}
\newlabel{ssec:relative-paths-consulting-subfiles-in-java-project}{{7.2.4}{178}{Support to relative paths in consulting Prolog sub-files}{subsection.7.2.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.5}Registering object bindings}{179}{subsection.7.2.5}}
\newlabel{ssec:register(Java)}{{7.2.5}{179}{Registering object bindings}{subsection.7.2.5}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.23}{\ignorespaces A program registering \texttt  {stdout} for \texttt  {System.out}. As an alternative to \texttt  {getLibrary}, \texttt  {loadLibrary} could have been used---if the library is already loaded, its behavior is identical to \texttt  {getLibrary}'s. Also, the fully qualified class name \texttt  {"alice.tuprolog.lib.OOLibrary"} is needed in \texttt  {getLibrary} only because \texttt  {OOLibrary} does \textit  {not} define a short library name (see Section \ref  {ssec:library-name} for details): otherwise, the shorter name could have been used.\relax }}{180}{table.caption.77}}
\newlabel{tab:registering-stdout-example}{{7.23}{180}{A program registering \texttt {stdout} for \texttt {System.out}. As an alternative to \texttt {getLibrary}, \texttt {loadLibrary} could have been used---if the library is already loaded, its behavior is identical to \texttt {getLibrary}'s. Also, the fully qualified class name \texttt {"alice.tuprolog.lib.OOLibrary"} is needed in \texttt {getLibrary} only because \texttt {OOLibrary} does \textit {not} define a short library name (see Section \ref {ssec:library-name} for details): otherwise, the shorter name could have been used.\relax }{table.caption.77}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.6}Capturing the Prolog output in Java}{181}{subsection.7.2.6}}
\newlabel{ssec:capturing-output}{{7.2.6}{181}{Capturing the Prolog output in Java}{subsection.7.2.6}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.3}Augmenting Prolog via Java:\\developing new libraries}{181}{section.7.3}}
\newlabel{sec:howto-develop-libraries}{{7.3}{181}{Augmenting Prolog via Java:\\developing new libraries}{section.7.3}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.24}{\ignorespaces Capturing the Prolog output from Java: a complete example.\relax }}{182}{table.caption.78}}
\newlabel{tab:capturing-output-complete}{{7.24}{182}{Capturing the Prolog output from Java: a complete example.\relax }{table.caption.78}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.1}Syntactic conventions}{183}{subsection.7.3.1}}
\newlabel{ssec:library-syntax}{{7.3.1}{183}{Syntactic conventions}{subsection.7.3.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.25}{\ignorespaces Definition of a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} library in Java.\relax }}{184}{table.caption.79}}
\newlabel{tab:TestLibrary}{{7.25}{184}{Definition of a \tuprolog {} library in Java.\relax }{table.caption.79}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.1}Capturing exceptions raised in libraries}{185}{subsubsection.7.3.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.2}Capturing the Java output in Prolog}{185}{subsubsection.7.3.1.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.3}Naming issues}{185}{subsubsection.7.3.1.3}}
\@writefile{lot}{\contentsline {table}{\numberline {7.26}{\ignorespaces A test program for the library defined in Table \ref  {tab:TestLibrary} \textit  {(top)} and the corresponding output \textit  {(bottom)}.\relax }}{186}{table.caption.80}}
\newlabel{tab:TestLibrary-Main}{{7.26}{186}{A test program for the library defined in Table \ref {tab:TestLibrary} \textit {(top)} and the corresponding output \textit {(bottom)}.\relax }{table.caption.80}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.5}{\ignorespaces Loading a library from the Prolog side in the GUI \textit  {(top)} and its output (\textit  {bottom}). Be sure to read the loading issues in Section \ref  {ssec:library-loading-issues}, or the example will not work.\relax }}{187}{figure.caption.81}}
\newlabel{fig:testlibrary3}{{7.5}{187}{Loading a library from the Prolog side in the GUI \textit {(top)} and its output (\textit {bottom}). Be sure to read the loading issues in Section \ref {ssec:library-loading-issues}, or the example will not work.\relax }{figure.caption.81}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.6}{\ignorespaces Loading a library from the Prolog side via the Library Manager icon in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI. The loading issues in Section \ref  {ssec:library-loading-issues} still apply. Please note that the browse/save buttons in the dialog are \textit  {not} to be used to load/save libraries, but only to load/save \textit  {\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} preferences} in the form of \texttt  {.2p} files.\relax }}{188}{figure.caption.82}}
\newlabel{fig:testlibrary1}{{7.6}{188}{Loading a library from the Prolog side via the Library Manager icon in the \tuprolog {} GUI. The loading issues in Section \ref {ssec:library-loading-issues} still apply. Please note that the browse/save buttons in the dialog are \textit {not} to be used to load/save libraries, but only to load/save \textit {\tuprolog {} preferences} in the form of \texttt {.2p} files.\relax }{figure.caption.82}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.7}{\ignorespaces Loading a library from the Prolog side on the CUIConsole: the output here is in the same terminal, as expected. Again, be sure to read the loading issues in Section \ref  {ssec:library-loading-issues}, or the example will not work.\relax }}{189}{figure.caption.83}}
\newlabel{fig:testlibrary5}{{7.7}{189}{Loading a library from the Prolog side on the CUIConsole: the output here is in the same terminal, as expected. Again, be sure to read the loading issues in Section \ref {ssec:library-loading-issues}, or the example will not work.\relax }{figure.caption.83}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.2}Hybrid Java+Prolog libraries}{189}{subsection.7.3.2}}
\newlabel{ssec:hybrid-libraries}{{7.3.2}{189}{Hybrid Java+Prolog libraries}{subsection.7.3.2}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.27}{\ignorespaces A hybrid (mixed) Java + Prolog library \textit  {(top)} and the corresponding test program \textit  {(bottom)}. \relax }}{190}{table.caption.84}}
\newlabel{tab:HybridLibrary}{{7.27}{190}{A hybrid (mixed) Java + Prolog library \textit {(top)} and the corresponding test program \textit {(bottom)}. \relax }{table.caption.84}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.3}Library loading issues}{191}{subsection.7.3.3}}
\newlabel{ssec:library-loading-issues}{{7.3.3}{191}{Library loading issues}{subsection.7.3.3}{}}
\citation{short-patj-sac08}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.4}Library Name}{192}{subsection.7.3.4}}
\newlabel{ssec:library-name}{{7.3.4}{192}{Library Name}{subsection.7.3.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.4}Augmenting Java via Prolog:\\the P@J framework}{192}{section.7.4}}
\newlabel{sec:p@j}{{7.4}{192}{Augmenting Java via Prolog:\\the P@J framework}{section.7.4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.28}{\ignorespaces Defining a new library with the same name as another.\relax }}{193}{table.caption.85}}
\newlabel{tab:StringLibrary-NewStringLibrary}{{7.28}{193}{Defining a new library with the same name as another.\relax }{table.caption.85}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.1}Term taxonomy}{194}{subsection.7.4.1}}
\newlabel{ssec:p@j-term-taxonomy}{{7.4.1}{194}{Term taxonomy}{subsection.7.4.1}{}}
\newlabel{ssec:java-api-types}{{7.4.1}{194}{Term taxonomy}{subsection.7.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.2}Examples}{195}{subsection.7.4.2}}
\newlabel{ssec:p@j-examples}{{7.4.2}{195}{Examples}{subsection.7.4.2}{}}
\newlabel{tab:pj-example2}{{7.4.2}{196}{Examples}{table.caption.88}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.29}{\ignorespaces A Java class exploiting Prolog for implementing an abstract method \textit  {(top)} and a client using it \textit  {(bottom)}. Note that the \texttt  {Arrays.asList} method exploits the Java shortcut syntax for varargs. To run the example, the \texttt  {javassist.jar} library, used by the P@J runtime, must be in the class path: \texttt  {E:>java\nobreakspace  {}\nobreakspace  {}-cp .;2p.jar;javassist.jar PJexample} \relax }}{197}{table.caption.86}}
\newlabel{tab:pj-example1}{{7.29}{197}{A Java class exploiting Prolog for implementing an abstract method \textit {(top)} and a client using it \textit {(bottom)}. Note that the \texttt {Arrays.asList} method exploits the Java shortcut syntax for varargs. To run the example, the \texttt {javassist.jar} library, used by the P@J runtime, must be in the class path: \texttt {E:>java~~-cp .;2p.jar;javassist.jar PJexample} \relax }{table.caption.86}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.30}{\ignorespaces Another Java class exploiting Prolog for method implementation. The \texttt  {length/2} predicate used in the \texttt  {clauses} section on top is part of the standard ISO list management predicates.\relax }}{198}{table.caption.87}}
\newlabel{tab:pj-example2}{{7.30}{198}{Another Java class exploiting Prolog for method implementation. The \texttt {length/2} predicate used in the \texttt {clauses} section on top is part of the standard ISO list management predicates.\relax }{table.caption.87}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.31}{\ignorespaces Another Java class exploiting Prolog for method implementation.\relax }}{199}{table.caption.88}}
\newlabel{tab:pj-example3}{{7.31}{199}{Another Java class exploiting Prolog for method implementation.\relax }{table.caption.88}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.32}{\ignorespaces A parser for arithmetic expressions encoded in Prolog inside an annotated Java program. The output prints \texttt  {true}, \texttt  {false}, \texttt  {true}, \texttt  {true} in this order, since 12+(3*4) is an expression but not a factor, while (12+(3*4)) is both an expression and a factor.\relax }}{200}{table.caption.89}}
\newlabel{tab:pj-example4}{{7.32}{200}{A parser for arithmetic expressions encoded in Prolog inside an annotated Java program. The output prints \texttt {true}, \texttt {false}, \texttt {true}, \texttt {true} in this order, since 12+(3*4) is an expression but not a factor, while (12+(3*4)) is both an expression and a factor.\relax }{table.caption.89}{}}
\citation{JSON}
\citation{GSON}
\citation{POJO}
\citation{GSON}
\@writefile{toc}{\contentsline {section}{\numberline {7.5}Migrating the engine: \textit  {the JSON API}}{201}{section.7.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.5.1}Requirements}{201}{subsection.7.5.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.5.2}API description and an example}{201}{subsection.7.5.2}}
\@writefile{lot}{\contentsline {table}{\numberline {7.33}{\ignorespaces A client program which migrates the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} engine via JSON serialization.\relax }}{203}{table.caption.90}}
\@writefile{lot}{\contentsline {table}{\numberline {7.34}{\ignorespaces A server program which creates a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} engine using JSON serialization and answers to the client program.\relax }}{204}{table.caption.91}}
\@setckpt{mpp-in-java}{
\setcounter{page}{205}
\setcounter{equation}{0}
\setcounter{enumi}{2}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{12}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{7}
\setcounter{section}{5}
\setcounter{subsection}{2}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{7}
\setcounter{table}{34}
\setcounter{Item}{34}
\setcounter{Hfootnote}{26}
\setcounter{bookmark@seq@number}{137}
\setcounter{FancyVerbLine}{15}
\setcounter{ContinuedFloat}{0}
\setcounter{r@tfl@t}{0}
\setcounter{lstnumber}{32}
\setcounter{section@level}{2}
\setcounter{lstlisting}{0}
}
