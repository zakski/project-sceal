\relax 
\providecommand\hyper@newdestlabel[2]{}
\citation{ikvm}
\@writefile{toc}{\contentsline {chapter}{\numberline {8}Multi-paradigm programming in Prolog and .NET}{193}{chapter.8}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{ch:mpp-in-dotnet}{{8}{193}{Multi-paradigm programming in Prolog and .NET}{chapter.8}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.1}A bit of history}{193}{section.8.1}}
\newlabel{sec:dotnet-tuprolog-history}{{8.1}{193}{A bit of history}{section.8.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1.1}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 2.1 and CSharpLibrary}{193}{subsection.8.1.1}}
\newlabel{ssec:dotnet-tuprolog2.1}{{8.1.1}{193}{\tuprolog {} 2.1 and CSharpLibrary}{subsection.8.1.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1.2}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 2.1.3: CSharpLibrary + exceptions}{194}{subsection.8.1.2}}
\newlabel{ssec:dotnet-tuprolog2.1.3}{{8.1.2}{194}{\tuprolog {} 2.1.3: CSharpLibrary + exceptions}{subsection.8.1.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1.3}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 2.2 and CLILibrary}{194}{subsection.8.1.3}}
\newlabel{ssec:dotnet-tuprolog2.2}{{8.1.3}{194}{\tuprolog {} 2.2 and CLILibrary}{subsection.8.1.3}{}}
\citation{ikvm}
\@writefile{toc}{\contentsline {section}{\numberline {8.2}IKVM Basics}{196}{section.8.2}}
\newlabel{sec:dotnet-ikvm}{{8.2}{196}{IKVM Basics}{section.8.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2.1}Dynamic vs. Static modality}{196}{subsection.8.2.1}}
\newlabel{ssec:ikvm-dynamic-static}{{8.2.1}{196}{Dynamic vs. Static modality}{subsection.8.2.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2.2}Class loading issues}{197}{subsection.8.2.2}}
\newlabel{ssec:ikvm-class-loading}{{8.2.2}{197}{Class loading issues}{subsection.8.2.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2.3}The other way: writing .NET applications in Java}{198}{subsection.8.2.3}}
\newlabel{ssec:ikvm-writing-app-in-java}{{8.2.3}{198}{The other way: writing .NET applications in Java}{subsection.8.2.3}{}}
\citation{ikvm}
\@writefile{toc}{\contentsline {section}{\numberline {8.3}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}.NET now}{200}{section.8.3}}
\newlabel{sec:dotnet-tuprolog-now}{{8.3}{200}{\tuprolog .NET now}{section.8.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3.1}Highlights}{200}{subsection.8.3.1}}
\newlabel{ssec:dotnet-highligths}{{8.3.1}{200}{Highlights}{subsection.8.3.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.1}{\ignorespaces Performance comparison between Java and C\# code executed directly or via \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET (times in milliseconds).\relax }}{201}{table.caption.82}}
\newlabel{tab:dotnet-benchmarks}{{8.1}{201}{Performance comparison between Java and C\# code executed directly or via \tuprolog {}.NET (times in milliseconds).\relax }{table.caption.82}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.4}Using .NET from Prolog: OOLibrary}{202}{section.8.4}}
\newlabel{sec:dotnet-oolibrary}{{8.4}{202}{Using .NET from Prolog: OOLibrary}{section.8.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {8.4.0.1}Motivation}{202}{subsubsection.8.4.0.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.1}{\ignorespaces Library manager in tuProlog.NET: notice the OOLibrary loaded instead of JavaLibrary.\relax }}{203}{figure.caption.83}}
\newlabel{fig:dotnet-oolibrary}{{8.1}{203}{Library manager in tuProlog.NET: notice the OOLibrary loaded instead of JavaLibrary.\relax }{figure.caption.83}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {8.4.0.2}Language Conventions}{203}{subsubsection.8.4.0.2}}
\@writefile{lot}{\contentsline {table}{\numberline {8.2}{\ignorespaces The public interface of the root \texttt  {Convention} class. Any actual convention for a given language must specialize from this class according to the language details.\relax }}{204}{table.caption.84}}
\newlabel{tab:dotnet-convention-interface}{{8.2}{204}{The public interface of the root \texttt {Convention} class. Any actual convention for a given language must specialize from this class according to the language details.\relax }{table.caption.84}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.3}{\ignorespaces The public interface of the \texttt  {OOLibrary} class. In addition, the \texttt  {$<-$/2}, (\texttt  {$<-$},\texttt  {returns})\texttt  {/3} and \texttt  {.} operators are defined for method calling and field/property access with the \texttt  {get}/\texttt  {set} pseudo-methods, exactly as in JavaLibrary.\relax }}{205}{table.caption.85}}
\newlabel{tab:dotnet-oolibrary-interface}{{8.3}{205}{The public interface of the \texttt {OOLibrary} class. In addition, the \texttt {$<-$/2}, (\texttt {$<-$},\texttt {returns})\texttt {/3} and \texttt {.} operators are defined for method calling and field/property access with the \texttt {get}/\texttt {set} pseudo-methods, exactly as in JavaLibrary.\relax }{table.caption.85}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {8.4.0.3}OOLibrary: predicates}{205}{subsubsection.8.4.0.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4.1}Examples}{206}{subsection.8.4.1}}
\newlabel{sec:dotnet-oolibrary-examples}{{8.4.1}{206}{Examples}{subsection.8.4.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.4}{\ignorespaces Using the \texttt  {Student} class in Visual Basic and Java without / with conventions.\relax }}{207}{table.caption.86}}
\newlabel{tab:dotnet-oolibrary-examples1}{{8.4}{207}{Using the \texttt {Student} class in Visual Basic and Java without / with conventions.\relax }{table.caption.86}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.5}{\ignorespaces Using the Java \texttt  {StringTokenizer} straight from \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET \textit  {(top)} and dynamically compile a Java source, convert it to \texttt  {dll}, and use it directly to instantiate an object and exploit it \textit  {(bottom)}. See also Figure \ref  {fig:dotnet-tokenizer-and-dynamic-compilation}.\relax }}{208}{table.caption.87}}
\newlabel{tab:dotnet-oolibrary-examples2}{{8.5}{208}{Using the Java \texttt {StringTokenizer} straight from \tuprolog {}.NET \textit {(top)} and dynamically compile a Java source, convert it to \texttt {dll}, and use it directly to instantiate an object and exploit it \textit {(bottom)}. See also Figure \ref {fig:dotnet-tokenizer-and-dynamic-compilation}.\relax }{table.caption.87}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.2}{\ignorespaces \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET executing the example in Table \ref  {tab:dotnet-oolibrary-examples2}. Of course, the execution time of the second example is sensible, since \texttt  {ikvm} is triggered behind the scenes to compile the class source.\relax }}{209}{figure.caption.88}}
\newlabel{fig:dotnet-tokenizer-and-dynamic-compilation}{{8.2}{209}{\tuprolog {}.NET executing the example in Table \ref {tab:dotnet-oolibrary-examples2}. Of course, the execution time of the second example is sensible, since \texttt {ikvm} is triggered behind the scenes to compile the class source.\relax }{figure.caption.88}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.6}{\ignorespaces Using four \texttt  {Student} classes written in four languages.\relax }}{210}{table.caption.89}}
\newlabel{tab:dotnet-oolibrary-examples3}{{8.6}{210}{Using four \texttt {Student} classes written in four languages.\relax }{table.caption.89}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4.2}Handling .NET Exceptions}{210}{subsection.8.4.2}}
\newlabel{ssec:dotnet-oolibrary-exceptions}{{8.4.2}{210}{Handling .NET Exceptions}{subsection.8.4.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.3}{\ignorespaces \texttt  {java\_catch} example in .NET\relax }}{211}{figure.caption.90}}
\newlabel{fig:dotnet-exceptions}{{8.3}{211}{\texttt {java\_catch} example in .NET\relax }{figure.caption.90}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.5}Using Prolog from .NET: the API}{212}{section.8.5}}
\newlabel{sec:dotnet-oo-api}{{8.5}{212}{Using Prolog from .NET: the API}{section.8.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.6}Augmenting Prolog via .NET:\\developing new libraries}{212}{section.8.6}}
\newlabel{sec:dotnet-developing new libraries}{{8.6}{212}{Augmenting Prolog via .NET:\\developing new libraries}{section.8.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.4}{\ignorespaces Creating a .NET application using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} in Visual Studio: new project.\relax }}{213}{figure.caption.91}}
\newlabel{fig:dotnet-visualstudio1}{{8.4}{213}{Creating a .NET application using \tuprolog {} in Visual Studio: new project.\relax }{figure.caption.91}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.5}{\ignorespaces Creating a .NET application using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} in Visual Studio: the user GUI\relax }}{214}{figure.caption.92}}
\newlabel{fig:dotnet-visualstudio3}{{8.5}{214}{Creating a .NET application using \tuprolog {} in Visual Studio: the user GUI\relax }{figure.caption.92}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.6}{\ignorespaces Creating a .NET application using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} in Visual Studio: the .NET handler of the \textit  {OK} button.\relax }}{215}{figure.caption.93}}
\newlabel{fig:dotnet-visualstudio4}{{8.6}{215}{Creating a .NET application using \tuprolog {} in Visual Studio: the .NET handler of the \textit {OK} button.\relax }{figure.caption.93}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.6.1}Capturing exceptions raised in .NET libraries}{216}{subsection.8.6.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.6.2}Capturing the .NET output in Prolog}{216}{subsection.8.6.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.7}{\ignorespaces Loading the translated TestLibrary in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET GUI either via the \texttt  {load\_library} predicate \textit  {(top)} or via the library manager \textit  {(bottom)}. (Compare with Figures \ref  {fig:testlibrary3} and \ref  {fig:testlibrary5} on page \pageref  {fig:testlibrary5}.)\relax }}{217}{figure.caption.94}}
\newlabel{fig:dotnet-testlibrary}{{8.7}{217}{Loading the translated TestLibrary in the \tuprolog {}.NET GUI either via the \texttt {load\_library} predicate \textit {(top)} or via the library manager \textit {(bottom)}. (Compare with Figures \ref {fig:testlibrary3} and \ref {fig:testlibrary5} on page \pageref {fig:testlibrary5}.)\relax }{figure.caption.94}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.7}Augmenting .NET via Prolog:\\the P@J framework revised}{218}{section.8.7}}
\newlabel{sec:dotnet-pj}{{8.7}{218}{Augmenting .NET via Prolog:\\the P@J framework revised}{section.8.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.7.1}P@.NET via code generators}{219}{subsection.8.7.1}}
\newlabel{ssec:dotnet-code-generators}{{8.7.1}{219}{P@.NET via code generators}{subsection.8.7.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.8}Putting everything together}{220}{section.8.8}}
\newlabel{sec:dotnet-putting-together}{{8.8}{220}{Putting everything together}{section.8.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.8}{\ignorespaces Top: generation of a C\# class from the Prolog source (\texttt  {Perm.pl}) shown on the left (default, static mode); the new class is named \texttt  {Perm.cs}. Bottom: same example in the dynamic mode. The Prolog file on the left is now just a pure placeholder containing a reference to the actual Prolog source. The generated class now loads the specified external file instead of embedding the Prolog code as a string. \relax }}{221}{figure.caption.95}}
\newlabel{fig:dotnet-codegen1and2}{{8.8}{221}{Top: generation of a C\# class from the Prolog source (\texttt {Perm.pl}) shown on the left (default, static mode); the new class is named \texttt {Perm.cs}. Bottom: same example in the dynamic mode. The Prolog file on the left is now just a pure placeholder containing a reference to the actual Prolog source. The generated class now loads the specified external file instead of embedding the Prolog code as a string. \relax }{figure.caption.95}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.9}{\ignorespaces Using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET to bridge between classes using heterogeneous data types.\relax }}{222}{figure.caption.96}}
\newlabel{fig:dotnet-pipolo1}{{8.9}{222}{Using \tuprolog {}.NET to bridge between classes using heterogeneous data types.\relax }{figure.caption.96}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.8.1}Example: Multi-language TicTacToe}{223}{subsection.8.8.1}}
\newlabel{ssec:mpp-tictactoe}{{8.8.1}{223}{Example: Multi-language TicTacToe}{subsection.8.8.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.10}{\ignorespaces The \texttt  {Main} class in C\#: in this case, the C\# version of the \texttt  {TicTacToe} class is loaded (last line), but this argument could easily be taken from the command line. Note the loading of \texttt  {OOLibrary} and the capturing of Prolog code with the same technique presented in Section \ref  {ssec:capturing-output}.\relax }}{224}{figure.caption.97}}
\newlabel{fig:dotnet-pipolo5}{{8.10}{224}{The \texttt {Main} class in C\#: in this case, the C\# version of the \texttt {TicTacToe} class is loaded (last line), but this argument could easily be taken from the command line. Note the loading of \texttt {OOLibrary} and the capturing of Prolog code with the same technique presented in Section \ref {ssec:capturing-output}.\relax }{figure.caption.97}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.11}{\ignorespaces The \texttt  {TicTacToe} class: public interface.\relax }}{225}{figure.caption.98}}
\newlabel{fig:dotnet-pipolo2}{{8.11}{225}{The \texttt {TicTacToe} class: public interface.\relax }{figure.caption.98}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.12}{\ignorespaces The Prolog code implementing the application logic.\relax }}{226}{figure.caption.99}}
\newlabel{fig:dotnet-pipolo34}{{8.12}{226}{The Prolog code implementing the application logic.\relax }{figure.caption.99}{}}
\@setckpt{mpp-in-dotnet}{
\setcounter{page}{227}
\setcounter{equation}{0}
\setcounter{enumi}{5}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{12}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{8}
\setcounter{section}{8}
\setcounter{subsection}{1}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{12}
\setcounter{table}{6}
\setcounter{Item}{45}
\setcounter{Hfootnote}{36}
\setcounter{bookmark@seq@number}{154}
\setcounter{FancyVerbLine}{15}
\setcounter{ContinuedFloat}{0}
\setcounter{section@level}{2}
}
