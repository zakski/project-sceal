\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {chapter}{\numberline {7}Multi-paradigm programming in Prolog and Java}{131}{chapter.7}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{ch:mpp-in-java}{{7}{131}{Multi-paradigm programming in Prolog and Java}{chapter.7}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.1}Using Java from Prolog: \textit  {JavaLibrary}}{131}{section.7.1}}
\newlabel{sec:java-library}{{7.1}{131}{Using Java from Prolog: \textit {JavaLibrary}}{section.7.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.1}Type mapping}{132}{subsection.7.1.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.1}{\ignorespaces Prolog/Java type mapping.\relax }}{132}{table.caption.45}}
\newlabel{tab:prolog-java-type-mapping}{{7.1}{132}{Prolog/Java type mapping.\relax }{table.caption.45}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.2}Creating and accessing objects: an overview}{133}{subsection.7.1.2}}
\newlabel{ssec:creating-and-accessing-objects}{{7.1.2}{133}{Creating and accessing objects: an overview}{subsection.7.1.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.1}Examples}{137}{subsubsection.7.1.2.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.2}{\ignorespaces The Java \texttt  {Counter} class and the Prolog program that exploits it via JavaLibrary.\relax }}{138}{table.caption.46}}
\newlabel{tab:javalibrary-counter-example}{{7.2}{138}{The Java \texttt {Counter} class and the Prolog program that exploits it via JavaLibrary.\relax }{table.caption.46}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.3}{\ignorespaces Creating and using a Swing component from a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} program.\relax }}{139}{table.caption.47}}
\newlabel{tab:jexamples-swing}{{7.3}{139}{Creating and using a Swing component from a \tuprolog {} program.\relax }{table.caption.47}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.2}Registering object bindings}{139}{subsubsection.7.1.2.2}}
\newlabel{sssec:register(prolog)}{{7.1.2.2}{139}{Registering object bindings}{subsubsection.7.1.2.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.3}Predicates}{140}{subsection.7.1.3}}
\newlabel{ssec:all-javalibrary-predicates}{{7.1.3}{140}{Predicates}{subsection.7.1.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.3.1}Object creation, class compilation and method invocation}{140}{subsubsection.7.1.3.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.4}{\ignorespaces Summary of \texttt  {JavaLibrary} predicates.\relax }}{141}{table.caption.48}}
\newlabel{tab:summary-of-javalibrary-predicates}{{7.4}{141}{Summary of \texttt {JavaLibrary} predicates.\relax }{table.caption.48}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.3.2}Array management}{143}{subsubsection.7.1.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.3.3}Helper predicates}{145}{subsubsection.7.1.3.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.4}Functors}{145}{subsection.7.1.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.5}Operators}{145}{subsection.7.1.5}}
\@writefile{lot}{\contentsline {table}{\numberline {7.5}{\ignorespaces JavaLibrary operators.\relax }}{145}{table.caption.49}}
\newlabel{tab:javalibrary-operators}{{7.5}{145}{JavaLibrary operators.\relax }{table.caption.49}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.6}Examples}{146}{subsection.7.1.6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.1}RMI Connection to a Remote Object}{146}{subsubsection.7.1.6.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.2}A Swing GUI}{146}{subsubsection.7.1.6.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.3}Database access via JDBC}{146}{subsubsection.7.1.6.3}}
\@writefile{lot}{\contentsline {table}{\numberline {7.6}{\ignorespaces The RMI example in Java and in \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} via JavaLibrary.\relax }}{147}{table.caption.50}}
\newlabel{tab:rmi-example}{{7.6}{147}{The RMI example in Java and in \tuprolog {} via JavaLibrary.\relax }{table.caption.50}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.7}{\ignorespaces Calculation of the minimum path between two given cities: the required data are fetched from a database via JDBC as shown in Table \ref  {tab:jdbc-example-part2}.\relax }}{148}{table.caption.51}}
\newlabel{tab:jdbc-example-part1}{{7.7}{148}{Calculation of the minimum path between two given cities: the required data are fetched from a database via JDBC as shown in Table \ref {tab:jdbc-example-part2}.\relax }{table.caption.51}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.8}{\ignorespaces Accessing JDBC via \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}'s JavaLibrary.\relax }}{149}{table.caption.52}}
\newlabel{tab:jdbc-example-part2}{{7.8}{149}{Accessing JDBC via \tuprolog {}'s JavaLibrary.\relax }{table.caption.52}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.4}Dynamic compilation}{149}{subsubsection.7.1.6.4}}
\@writefile{lot}{\contentsline {table}{\numberline {7.9}{\ignorespaces Dynamic compilation of a Java source code.\relax }}{149}{table.caption.53}}
\newlabel{tab:dynamic-compilation}{{7.9}{149}{Dynamic compilation of a Java source code.\relax }{table.caption.53}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.7}Handling Java Exceptions}{150}{subsection.7.1.7}}
\newlabel{ssec:java-exceptions-in-tuprolog}{{7.1.7}{150}{Handling Java Exceptions}{subsection.7.1.7}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.10}{\ignorespaces Another example of dynamic compilation, where the class source is retrieved via FTP: the user \texttt  {myName}, whose password is \texttt  {myPwd}, gets the content of the \texttt  {Counter.java} file from the server whose IP address is \texttt  {srvAddr}, dynamically compiles the class and creates a corresponding object. The FTP service is provided here by a shareware Java library, but any other similar library would work.\relax }}{151}{table.caption.54}}
\newlabel{tab:dynamic-compilation-via-FTP}{{7.10}{151}{Another example of dynamic compilation, where the class source is retrieved via FTP: the user \texttt {myName}, whose password is \texttt {myPwd}, gets the content of the \texttt {Counter.java} file from the server whose IP address is \texttt {srvAddr}, dynamically compiles the class and creates a corresponding object. The FTP service is provided here by a shareware Java library, but any other similar library would work.\relax }{table.caption.54}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.7.1}Java exception examples}{152}{subsubsection.7.1.7.1}}
\newlabel{ssec:java-exception-examples}{{7.1.7.1}{152}{Java exception examples}{subsubsection.7.1.7.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.1}{\ignorespaces Catching the Java exceptions of Example 1 in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI. \textit  {Top:} the solutions tab. \textit  {Bottom:} details of the exception in the exception tab (see the \texttt  {Cause} variable bound to \texttt  {0} and the \texttt  {Msg} variable bound to \texttt  {'Counter'}; the other details map onto the anonymous variable \texttt  {\_}). \relax }}{154}{figure.caption.55}}
\newlabel{fig:exceptions1}{{7.1}{154}{Catching the Java exceptions of Example 1 in the \tuprolog {} GUI. \textit {Top:} the solutions tab. \textit {Bottom:} details of the exception in the exception tab (see the \texttt {Cause} variable bound to \texttt {0} and the \texttt {Msg} variable bound to \texttt {'Counter'}; the other details map onto the anonymous variable \texttt {\_}). \relax }{figure.caption.55}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.2}{\ignorespaces A failed exception in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI: the \texttt  {No} answer in the status bar and the \textit  {halt} message in the Solutions tab.\relax }}{155}{figure.caption.56}}
\newlabel{fig:exceptions2}{{7.2}{155}{A failed exception in the \tuprolog {} GUI: the \texttt {No} answer in the status bar and the \textit {halt} message in the Solutions tab.\relax }{figure.caption.56}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.2}Using Prolog from Java: \textit  {the Java API}}{156}{section.7.2}}
\newlabel{sec:java-api}{{7.2}{156}{Using Prolog from Java: \textit {the Java API}}{section.7.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.1}A Taxonomy of Prolog types in Java}{156}{subsection.7.2.1}}
\newlabel{ssec:java-api-types}{{7.2.1}{156}{A Taxonomy of Prolog types in Java}{subsection.7.2.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.3}{\ignorespaces Prolog entities as a taxonomy of Java classes.\relax }}{156}{figure.caption.57}}
\newlabel{fig:term-taxonomy}{{7.3}{156}{Prolog entities as a taxonomy of Java classes.\relax }{figure.caption.57}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.1.1}Further notes about \texttt  {Term}s}{157}{subsubsection.7.2.1.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.11}{\ignorespaces Manipulating Prolog entities from Java.\relax }}{158}{table.caption.58}}
\newlabel{tab:creating-prolog-terms-in-java}{{7.11}{158}{Manipulating Prolog entities from Java.\relax }{table.caption.58}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.2}Prolog engines, theories and libraries}{159}{subsection.7.2.2}}
\newlabel{ssec:java-api-engine-solveinfo}{{7.2.2}{159}{Prolog engines, theories and libraries}{subsection.7.2.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.2.1}Further notes about \texttt  {Prolog} engines}{159}{subsubsection.7.2.2.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.12}{\ignorespaces Classes for interacting with \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} engines.\relax }}{160}{table.caption.59}}
\newlabel{tab:engine-interface}{{7.12}{160}{Classes for interacting with \tuprolog {} engines.\relax }{table.caption.59}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.3}Examples}{161}{subsection.7.2.3}}
\newlabel{ssec:java-api-examples}{{7.2.3}{161}{Examples}{subsection.7.2.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.1}Appending lists}{161}{subsubsection.7.2.3.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.13}{\ignorespaces The list appending example.\relax }}{162}{table.caption.60}}
\newlabel{tab:java-api-example1}{{7.13}{162}{The list appending example.\relax }{table.caption.60}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.14}{\ignorespaces Building a theory ``by hand'' from a clause list.\relax }}{163}{table.caption.61}}
\newlabel{tab:java-api-example-clauselist}{{7.14}{163}{Building a theory ``by hand'' from a clause list.\relax }{table.caption.61}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.2}Exploiting a theory from clause list}{164}{subsubsection.7.2.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.3}A console-based Prolog interpreter}{164}{subsubsection.7.2.3.3}}
\@writefile{lot}{\contentsline {table}{\numberline {7.15}{\ignorespaces A simple console-based Prolog interpreter.\relax }}{165}{table.caption.62}}
\newlabel{tab:console-sample}{{7.15}{165}{A simple console-based Prolog interpreter.\relax }{table.caption.62}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.4}{\ignorespaces A sample session with the Console-based Interpreter.\relax }}{166}{figure.caption.63}}
\newlabel{fig:console-interpreter}{{7.4}{166}{A sample session with the Console-based Interpreter.\relax }{figure.caption.63}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.4}Support to relative paths in consulting Prolog sub-files}{166}{subsection.7.2.4}}
\newlabel{ssec:relative-paths-consulting-subfiles-in-java-project}{{7.2.4}{166}{Support to relative paths in consulting Prolog sub-files}{subsection.7.2.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.5}Registering object bindings}{167}{subsection.7.2.5}}
\newlabel{ssec:register(Java)}{{7.2.5}{167}{Registering object bindings}{subsection.7.2.5}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.16}{\ignorespaces A program registering \texttt  {stdout} for \texttt  {System.out}. As an alternative to \texttt  {getLibrary}, \texttt  {loadLibrary} could have been used---if the library is already loaded, its behavior is identical to \texttt  {getLibrary}'s. Also, the fully qualified class name \texttt  {"alice.tuprolog.lib.JavaLibrary"} is needed in \texttt  {getLibrary} only because \texttt  {JavaLibrary} does \textit  {not} define a short library name (see Section \ref  {ssec:library-name} for details): otherwise, the shorter name could have been used.\relax }}{168}{table.caption.64}}
\newlabel{tab:registering-stdout-example}{{7.16}{168}{A program registering \texttt {stdout} for \texttt {System.out}. As an alternative to \texttt {getLibrary}, \texttt {loadLibrary} could have been used---if the library is already loaded, its behavior is identical to \texttt {getLibrary}'s. Also, the fully qualified class name \texttt {"alice.tuprolog.lib.JavaLibrary"} is needed in \texttt {getLibrary} only because \texttt {JavaLibrary} does \textit {not} define a short library name (see Section \ref {ssec:library-name} for details): otherwise, the shorter name could have been used.\relax }{table.caption.64}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.6}Capturing the Prolog output in Java}{169}{subsection.7.2.6}}
\newlabel{ssec:capturing-output}{{7.2.6}{169}{Capturing the Prolog output in Java}{subsection.7.2.6}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.3}Augmenting Prolog via Java:\\developing new libraries}{169}{section.7.3}}
\newlabel{sec:howto-develop-libraries}{{7.3}{169}{Augmenting Prolog via Java:\\developing new libraries}{section.7.3}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.17}{\ignorespaces Capturing the Prolog output from Java: a complete example.\relax }}{170}{table.caption.65}}
\newlabel{tab:capturing-output-complete}{{7.17}{170}{Capturing the Prolog output from Java: a complete example.\relax }{table.caption.65}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.1}Syntactic conventions}{171}{subsection.7.3.1}}
\newlabel{ssec:library-syntax}{{7.3.1}{171}{Syntactic conventions}{subsection.7.3.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.18}{\ignorespaces Definition of a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} library in Java.\relax }}{172}{table.caption.66}}
\newlabel{tab:TestLibrary}{{7.18}{172}{Definition of a \tuprolog {} library in Java.\relax }{table.caption.66}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.1}Capturing exceptions raised in libraries}{173}{subsubsection.7.3.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.2}Capturing the Java output in Prolog}{173}{subsubsection.7.3.1.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.3}Naming issues}{173}{subsubsection.7.3.1.3}}
\@writefile{lot}{\contentsline {table}{\numberline {7.19}{\ignorespaces A test program for the library defined in Table \ref  {tab:TestLibrary} \textit  {(top)} and the corresponding output \textit  {(bottom)}.\relax }}{174}{table.caption.67}}
\newlabel{tab:TestLibrary-Main}{{7.19}{174}{A test program for the library defined in Table \ref {tab:TestLibrary} \textit {(top)} and the corresponding output \textit {(bottom)}.\relax }{table.caption.67}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.5}{\ignorespaces Loading a library from the Prolog side in the GUI \textit  {(top)} and its output (\textit  {bottom}). Be sure to read the loading issues in Section \ref  {ssec:library-loading-issues}, or the example will not work.\relax }}{175}{figure.caption.68}}
\newlabel{fig:testlibrary3}{{7.5}{175}{Loading a library from the Prolog side in the GUI \textit {(top)} and its output (\textit {bottom}). Be sure to read the loading issues in Section \ref {ssec:library-loading-issues}, or the example will not work.\relax }{figure.caption.68}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.6}{\ignorespaces Loading a library from the Prolog side via the Library Manager icon in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI. The loading issues in Section \ref  {ssec:library-loading-issues} still apply. Please note that the browse/save buttons in the dialog are \textit  {not} to be used to load/save libraries, but only to load/save \textit  {\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} preferences} in the form of \texttt  {.2p} files.\relax }}{176}{figure.caption.69}}
\newlabel{fig:testlibrary1}{{7.6}{176}{Loading a library from the Prolog side via the Library Manager icon in the \tuprolog {} GUI. The loading issues in Section \ref {ssec:library-loading-issues} still apply. Please note that the browse/save buttons in the dialog are \textit {not} to be used to load/save libraries, but only to load/save \textit {\tuprolog {} preferences} in the form of \texttt {.2p} files.\relax }{figure.caption.69}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.7}{\ignorespaces Loading a library from the Prolog side on the CUIConsole: the output here is in the same terminal, as expected. Again, be sure to read the loading issues in Section \ref  {ssec:library-loading-issues}, or the example will not work.\relax }}{177}{figure.caption.70}}
\newlabel{fig:testlibrary5}{{7.7}{177}{Loading a library from the Prolog side on the CUIConsole: the output here is in the same terminal, as expected. Again, be sure to read the loading issues in Section \ref {ssec:library-loading-issues}, or the example will not work.\relax }{figure.caption.70}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.2}Hybrid Java+Prolog libraries}{177}{subsection.7.3.2}}
\newlabel{ssec:hybrid-libraries}{{7.3.2}{177}{Hybrid Java+Prolog libraries}{subsection.7.3.2}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.20}{\ignorespaces A hybrid (mixed) Java + Prolog library \textit  {(top)} and the corresponding test program \textit  {(bottom)}. \relax }}{178}{table.caption.71}}
\newlabel{tab:HybridLibrary}{{7.20}{178}{A hybrid (mixed) Java + Prolog library \textit {(top)} and the corresponding test program \textit {(bottom)}. \relax }{table.caption.71}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.3}Library loading issues}{179}{subsection.7.3.3}}
\newlabel{ssec:library-loading-issues}{{7.3.3}{179}{Library loading issues}{subsection.7.3.3}{}}
\citation{short-patj-sac08}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.4}Library Name}{180}{subsection.7.3.4}}
\newlabel{ssec:library-name}{{7.3.4}{180}{Library Name}{subsection.7.3.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.4}Augmenting Java via Prolog:\\the P@J framework}{180}{section.7.4}}
\newlabel{sec:p@j}{{7.4}{180}{Augmenting Java via Prolog:\\the P@J framework}{section.7.4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.21}{\ignorespaces Defining a new library with the same name as another.\relax }}{181}{table.caption.72}}
\newlabel{tab:StringLibrary-NewStringLibrary}{{7.21}{181}{Defining a new library with the same name as another.\relax }{table.caption.72}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.1}Term taxonomy}{182}{subsection.7.4.1}}
\newlabel{ssec:p@j-term-taxonomy}{{7.4.1}{182}{Term taxonomy}{subsection.7.4.1}{}}
\newlabel{ssec:java-api-types}{{7.4.1}{182}{Term taxonomy}{subsection.7.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.2}Examples}{183}{subsection.7.4.2}}
\newlabel{ssec:p@j-examples}{{7.4.2}{183}{Examples}{subsection.7.4.2}{}}
\newlabel{tab:pj-example2}{{7.4.2}{184}{Examples}{table.caption.75}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.22}{\ignorespaces A Java class exploiting Prolog for implementing an abstract method \textit  {(top)} and a client using it \textit  {(bottom)}. Note that the \texttt  {Arrays.asList} method exploits the Java shortcut syntax for varargs. To run the example, the \texttt  {javassist.jar} library, used by the P@J runtime, must be in the class path: \texttt  {E:>java\nobreakspace  {}\nobreakspace  {}-cp .;2p.jar;javassist.jar PJexample} \relax }}{185}{table.caption.73}}
\newlabel{tab:pj-example1}{{7.22}{185}{A Java class exploiting Prolog for implementing an abstract method \textit {(top)} and a client using it \textit {(bottom)}. Note that the \texttt {Arrays.asList} method exploits the Java shortcut syntax for varargs. To run the example, the \texttt {javassist.jar} library, used by the P@J runtime, must be in the class path: \texttt {E:>java~~-cp .;2p.jar;javassist.jar PJexample} \relax }{table.caption.73}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.23}{\ignorespaces Another Java class exploiting Prolog for method implementation. The \texttt  {length/2} predicate used in the \texttt  {clauses} section on top is part of the standard ISO list management predicates.\relax }}{186}{table.caption.74}}
\newlabel{tab:pj-example2}{{7.23}{186}{Another Java class exploiting Prolog for method implementation. The \texttt {length/2} predicate used in the \texttt {clauses} section on top is part of the standard ISO list management predicates.\relax }{table.caption.74}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.24}{\ignorespaces Another Java class exploiting Prolog for method implementation.\relax }}{187}{table.caption.75}}
\newlabel{tab:pj-example3}{{7.24}{187}{Another Java class exploiting Prolog for method implementation.\relax }{table.caption.75}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.25}{\ignorespaces A parser for arithmetic expressions encoded in Prolog inside an annotated Java program. The output prints \texttt  {true}, \texttt  {false}, \texttt  {true}, \texttt  {true} in this order, since 12+(3*4) is an expression but not a factor, while (12+(3*4)) is both an expression and a factor.\relax }}{188}{table.caption.76}}
\newlabel{tab:pj-example4}{{7.25}{188}{A parser for arithmetic expressions encoded in Prolog inside an annotated Java program. The output prints \texttt {true}, \texttt {false}, \texttt {true}, \texttt {true} in this order, since 12+(3*4) is an expression but not a factor, while (12+(3*4)) is both an expression and a factor.\relax }{table.caption.76}{}}
\@setckpt{mpp-in-java}{
\setcounter{page}{189}
\setcounter{equation}{0}
\setcounter{enumi}{2}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{10}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{7}
\setcounter{section}{4}
\setcounter{subsection}{2}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{7}
\setcounter{table}{25}
\setcounter{Item}{34}
\setcounter{Hfootnote}{22}
\setcounter{bookmark@seq@number}{126}
\setcounter{FancyVerbLine}{15}
\setcounter{ContinuedFloat}{0}
\setcounter{section@level}{2}
}
