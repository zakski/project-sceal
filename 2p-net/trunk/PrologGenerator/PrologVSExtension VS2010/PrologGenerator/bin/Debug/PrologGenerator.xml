<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PrologGenerator</name>
    </assembly>
    <members>
        <member name="T:PrologGenerator.BaseCodeGeneratorWithSite">
            <summary>
            Base code generator with site implementation
            </summary>
        </member>
        <member name="T:PrologGenerator.BaseCodeGenerator">
            <summary>
            A managed wrapper for VS's concept of an IVsSingleFileGenerator which is
            a custom tool invoked at design time which can take any file as an input
            and provide any file as output.
            </summary>
        </member>
        <member name="M:PrologGenerator.BaseCodeGenerator.Microsoft#VisualStudio#Shell#Interop#IVsSingleFileGenerator#DefaultExtension(System.String@)">
            <summary>
            Implements the IVsSingleFileGenerator.DefaultExtension method. 
            Returns the extension of the generated file
            </summary>
            <param name="pbstrDefaultExtension">Out parameter, will hold the extension that is to be given to the output file name. The returned extension must include a leading period</param>
            <returns>S_OK if successful, E_FAIL if not</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGenerator.Microsoft#VisualStudio#Shell#Interop#IVsSingleFileGenerator#Generate(System.String,System.String,System.String,System.IntPtr[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)">
            <summary>
            Implements the IVsSingleFileGenerator.Generate method.
            Executes the transformation and returns the newly generated output file, whenever a custom tool is loaded, or the input file is saved
            </summary>
            <param name="wszInputFilePath">The full path of the input file. May be a null reference (Nothing in Visual Basic) in future releases of Visual Studio, so generators should not rely on this value</param>
            <param name="bstrInputFileContents">The contents of the input file. This is either a UNICODE BSTR (if the input file is text) or a binary BSTR (if the input file is binary). If the input file is a text file, the project system automatically converts the BSTR to UNICODE</param>
            <param name="wszDefaultNamespace">This parameter is meaningful only for custom tools that generate code. It represents the namespace into which the generated code will be placed. If the parameter is not a null reference (Nothing in Visual Basic) and not empty, the custom tool can use the following syntax to enclose the generated code</param>
            <param name="rgbOutputFileContents">[out] Returns an array of bytes to be written to the generated file. You must include UNICODE or UTF-8 signature bytes in the returned byte array, as this is a raw stream. The memory for rgbOutputFileContents must be allocated using the .NET Framework call, System.Runtime.InteropServices.AllocCoTaskMem, or the equivalent Win32 system call, CoTaskMemAlloc. The project system is responsible for freeing this memory</param>
            <param name="pcbOutput">[out] Returns the count of bytes in the rgbOutputFileContent array</param>
            <param name="pGenerateProgress">A reference to the IVsGeneratorProgress interface through which the generator can report its progress to the project system</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns E_FAIL</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGenerator.GetDefaultExtension">
            <summary>
            Gets the default extension for this generator
            </summary>
            <returns>String with the default extension for this generator</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGenerator.GenerateCode(System.String)">
            <summary>
            The method that does the actual work of generating code given the input file
            </summary>
            <param name="inputFileContent">File contents as a string</param>
            <returns>The generated code file as a byte-array</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGenerator.GeneratorError(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Method that will communicate an error via the shell callback mechanism
            </summary>
            <param name="level">Level or severity</param>
            <param name="message">Text displayed to the user</param>
            <param name="line">Line number of error</param>
            <param name="column">Column number of error</param>
        </member>
        <member name="M:PrologGenerator.BaseCodeGenerator.GeneratorWarning(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Method that will communicate a warning via the shell callback mechanism
            </summary>
            <param name="level">Level or severity</param>
            <param name="message">Text displayed to the user</param>
            <param name="line">Line number of warning</param>
            <param name="column">Column number of warning</param>
        </member>
        <member name="P:PrologGenerator.BaseCodeGenerator.FileNameSpace">
            <summary>
            Namespace for the file
            </summary>
        </member>
        <member name="P:PrologGenerator.BaseCodeGenerator.InputFilePath">
            <summary>
            File-path for the input file
            </summary>
        </member>
        <member name="P:PrologGenerator.BaseCodeGenerator.CodeGeneratorProgress">
            <summary>
            Interface to the VS shell object we use to tell our progress while we are generating
            </summary>
        </member>
        <member name="P:PrologGenerator.BaseCodeGenerator.HasError">
            <summary>
            Property that indicate is there is same errors.
            </summary>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
            <summary>
            GetSite method of IOleObjectWithSite
            </summary>
            <param name="riid">interface to get</param>
            <param name="ppvSite">IntPtr in which to stuff return value</param>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
            <summary>
            SetSite method of IOleObjectWithSite
            </summary>
            <param name="pUnkSite">site for this object to use</param>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetService(System.Guid)">
            <summary>
            Method to get a service by its GUID
            </summary>
            <param name="serviceGuid">GUID of service to retrieve</param>
            <returns>An object that implements the requested service</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetService(System.Type)">
            <summary>
            Method to get a service by its Type
            </summary>
            <param name="serviceType">Type of service to retrieve</param>
            <returns>An object that implements the requested service</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetCodeProvider">
            <summary>
            Returns a CodeDomProvider object for the language of the project containing
            the project item the generator was called on
            </summary>
            <returns>A CodeDomProvider object</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetDefaultExtension">
            <summary>
            Gets the default extension of the output file from the CodeDomProvider
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetProjectItem">
            <summary>
            Returns the EnvDTE.ProjectItem object that corresponds to the project item the code 
            generator was called on
            </summary>
            <returns>The EnvDTE.ProjectItem of the project item the code generator was called on</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetProject">
            <summary>
            Returns the EnvDTE.Project object of the project containing the project item the code 
            generator was called on
            </summary>
            <returns>
            The EnvDTE.Project object of the project containing the project item the code generator was called on
            </returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetVSProjectItem">
            <summary>
            Returns the VSLangProj.VSProjectItem object that corresponds to the project item the code 
            generator was called on
            </summary>
            <returns>The VSLangProj.VSProjectItem of the project item the code generator was called on</returns>
        </member>
        <member name="M:PrologGenerator.BaseCodeGeneratorWithSite.GetVSProject">
            <summary>
            Returns the VSLangProj.VSProject object of the project containing the project item the code 
            generator was called on
            </summary>
            <returns>
            The VSLangProj.VSProject object of the project containing the project item 
            the code generator was called on
            </returns>
        </member>
        <member name="P:PrologGenerator.BaseCodeGeneratorWithSite.SiteServiceProvider">
            <summary>
            Demand-creates a ServiceProvider
            </summary>
        </member>
        <member name="T:Microsoft.Samples.VisualStudio.GeneratorSample.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.BadClassMemberName">
            <summary>
              Looks up a localized string similar to This generator only supports &apos;Constant&apos; and &apos;Variable&apos; child nodes for a &apos;Class&apos; node. Found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.BadTypeAccess">
            <summary>
              Looks up a localized string similar to For types, the access attribute must be &apos;public&apos; or &apos;internal&apos;. Found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.BadVariableAccess">
            <summary>
              Looks up a localized string similar to For &apos;Variable&apos; nodes, the &apos;access&apos; attribute must be &apos;public&apos;, &apos;protected&apos;, or &apos;private&apos;. Found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.ClassMemberNoName">
            <summary>
              Looks up a localized string similar to &apos;Constant&apos; and &apos;Variable&apos; child nodes of a &apos;Class&apos; node must have a &apos;name&apos; attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.ClassMemberNoType">
            <summary>
              Looks up a localized string similar to &apos;Constant&apos; and &apos;Variable&apos; child nodes of a &apos;Class&apos; node must have a &apos;type&apos; attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.ClassNodeNoName">
            <summary>
              Looks up a localized string similar to Each &apos;Class&apos; node must have a name attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.ConstantNoValue">
            <summary>
              Looks up a localized string similar to &apos;Constant&apos; nodes must have a &apos;value&apos; attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.EnumInvalidChild">
            <summary>
              Looks up a localized string similar to &apos;Enum&apos; nodes can only have &apos;EnumMember&apos; child nodes. Found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.EnumMemberNodeNoName">
            <summary>
              Looks up a localized string similar to Each &apos;EnumMember&apos; node must have a name attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.EnumMemberValueMissing">
            <summary>
              Looks up a localized string similar to If &apos;Enum&apos; node has flagsAttribute=&quot;true&quot;, each &apos;EnumMember&apos; child must have a value attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.EnumNodeNoName">
            <summary>
              Looks up a localized string similar to Each &apos;Enum&apos; node must have a name attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.EnumNoMembers">
            <summary>
              Looks up a localized string similar to &apos;Enum&apos; nodes must have at least one &apos;EnumMember&apos; child node.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.GetDefaultExtensionFailed">
            <summary>
              Looks up a localized string similar to The call to GetDefaultExtension() has failed due to the exception:.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.InvalidRoot">
            <summary>
              Looks up a localized string similar to Expected root element: &apos;Types&apos;. Found: {0}  .
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.InvalidType">
            <summary>
              Looks up a localized string similar to The &apos;Types&apos; root node should only contain &apos;Class&apos; or &apos;Enum&apos; child nodes. Found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.NoTypes">
            <summary>
              Looks up a localized string similar to The &apos;Types&apos; root element must contain at least one &apos;Class&apos; or &apos;Enum&apos; child.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.VisualStudio.GeneratorSample.Strings.StaticConstant">
            <summary>
              Looks up a localized string similar to &apos;Constant&apos; nodes can not have the &apos;static&apos; attribute.
            </summary>
        </member>
        <member name="T:PrologGenerator.PrologGenerator">
            <summary>
            This is the generator class. 
            When setting the 'Custom Tool' property of a C# or VB project item to "PrologGenerator", 
            the GenerateCode function will get called and will return the contents of the generated file 
            to the project system
            </summary>
        </member>
        <member name="M:PrologGenerator.PrologGenerator.GenerateCode(System.String)">
            <summary>
            Function that builds the contents of the generated file based on the contents of the input file
            </summary>
            <param name="inputFileContent">Content of the input file</param>
            <returns>Generated file as a byte array</returns>
        </member>
        <member name="T:PrologGenerator.FileResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PrologGenerator.FileResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PrologGenerator.FileResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PrologGenerator.FileResource.CSharpExternalTemplate">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using alice.tuprolog;
            using java.io;
            
            namespace #NameSpace {
            
            	 public class #ClassName : Prolog {
             
            			 public #ClassName(){ 
            					 setTheory(new Theory(new FileInputStream(&quot;#ExtFile&quot;))); 
            		} 
            
            	 } 
            
            }.
             </summary>
        </member>
        <member name="P:PrologGenerator.FileResource.CSharpTemplate">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using alice.tuprolog;
            
            namespace #NameSpace {
            
            	 public class #ClassName : Prolog {
            	  
            	 private string th = @&quot;
            	 #Theory&quot;; 
            
            		 public #ClassName(){ 
            					 setTheory(new Theory(th)); 
            		} 
            	 } 
            }.
             </summary>
        </member>
        <member name="P:PrologGenerator.FileResource.VBExternalTemplate">
             <summary>
               Looks up a localized string similar to Imports alice.tuprolog
            Module #NameSpace
            
            	Public Class #ClassName
            		Inherits Prolog
            
            		Public Sub New()
            			Me.setTheory(New Theory(New FileInputStream(&quot;#ExtFile&quot;)))
            
            		End Sub
            
            	End Class
            End Module
            
            namespace #NameSpace {
            
            	 public class #ClassName : Prolog {
             
            			 public #ClassName(){ 
            					 setTheory(new Theory(new FileInputStream(&quot;#ExtFile&quot;))); 
            		} 
            
            	 } 
            
            }.
             </summary>
        </member>
        <member name="P:PrologGenerator.FileResource.VBTemplate">
             <summary>
               Looks up a localized string similar to Imports alice.tuprolog
            Module #NameSpace
            
                Public Class #ClassName
                    Inherits Prolog
                    Dim th As String = &quot;#theory&quot;
            
                    Public Sub New()
                        Me.setTheory(New Theory(th))
            
                    End Sub
            
                End Class
            End Module
            .
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute">
            <summary>
            This attribute adds a custom file generator registry entry for specific file 
            type. 
            For Example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\Generators\
            	{fae04ec1-301f-11d3-bf4b-00c04f79efbc}\MyGenerator]
            		"CLSID"="{AAAA53CC-3D4F-40a2-BD4D-4F3419755476}"
                    "GeneratesDesignTimeSource" = d'1'
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new CodeGeneratorRegistrationAttribute attribute to register a custom
            code generator for the provided context. 
            </summary>
            <param name="generatorType">The type of Code generator. Type that implements IVsSingleFileGenerator</param>
            <param name="generatorName">The generator name</param>
            <param name="contextGuid">The context GUID this code generator would appear under.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration inforomation should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this file extension.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorType">
            <summary>
            Get the generator Type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.ContextGuid">
            <summary>
            Get the Guid representing the project type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorGuid">
            <summary>
            Get the Guid representing the generator type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratesDesignTimeSource">
            <summary>
            Get or Set the GeneratesDesignTimeSource value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratesSharedDesignTimeSource">
            <summary>
            Get or Set the GeneratesSharedDesignTimeSource value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorName">
            <summary>
            Gets the Generator name 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorRegKeyName">
            <summary>
            Gets the Generator reg key name under 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorRegKey">
            <summary>
            Property that gets the generator base key name
            </summary>
        </member>
    </members>
</doc>
