apply plugin: 'antlr'

sourceSets {
    main.scala.srcDirs = ['src/main/scala', 'src/generated/antlr/', 'src/main/java']
    main.java.srcDirs = []
}

dependencies {
    compile group: 'org.scala-lang', name: 'scala-compiler', version: versions.scala_full

    compile group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j

    antlr group: 'org.antlr', name: 'antlr4', version: versions.antlr
    compile group: 'org.antlr', name: 'antlr4-runtime', version: versions.antlr

    testCompile group: 'org.scalatest', name: "scalatest_${versions.scala_binary}", version: versions.scalatest
    
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: versions.slf4j
 
    testCompile group: 'org.junit.platform', name:'junit-platform-runner', version: versions.junit_platform_runner
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
}

generateGrammarSource {
    doFirst {
        (new File("./src/generated/antlr/com/szadowsz/gospel/core/parser")).mkdirs()
    }
    maxHeapSize = "64m"
    arguments = arguments + ["-visitor", "-long-messages"]
    antlrClasspath = files('./src/main/antlr-resources/') + antlrClasspath

    outputDirectory = new File("./src/generated/antlr/com/szadowsz/gospel/core/parser")
}